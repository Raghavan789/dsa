import java.util.LinkedList;
  public class Exercise1 {
  public static void main(String[] args) {
     // create an empty linked list
     LinkedList<String> l_list = new LinkedList<String>();
   // use add() method to add values in the linked list
          l_list.add("Red");
          l_list.add("Green");
          l_list.add("Black");
          l_list.add("White");
          l_list.add("Pink");
          l_list.add("Yellow");
	
   // print the list
   System.out.println("The linked list: " + l_list);
 
for (String element : l_list) {
    System.out.println(element);
    }

// set Iterator at specified index
   Iterator p = l_list.listIterator(1);

   // print list from second position
   while (p.hasNext()) {
   System.out.println(p.next());
   }

Iterator it = l_list.descendingIterator();

     // Print list elements in reverse order
     System.out.println("Elements in Reverse Order:");
     while (it.hasNext()) {
        System.out.println(it.next());
     }
  }

  // Print list elements in reverse order using a for loop with index
        System.out.println("Elements in Reverse Order:");
        for (int i = l_list.size() - 1; i >= 0; i--) {
            System.out.println(l_list.get(i));
        }

 // Add an element at the beginning 
    l_list.addFirst("White");
 
   // Add an element at the end of list 
    l_list.addLast("Pink");
     System.out.println("Final linked list:" + l_list); 
 

l_list.offerFirst("Pink");

 l_list.offerLast("Pink");


  Object first_element = l_list.getFirst();
    System.out.println("First Element is: "+first_element);
 
    // Find last element of the List
    Object last_element = l_list.getLast();
    System.out.println("Last Element is: "+last_element);


  for(int p=0; p < l_list.size(); p++)
   {
      System.out.println("Element at index "+p+": "+l_list.get(p));
    } 
  System.out.println("The Original linked list: " + l_list);
  
   //Swapping 1st(index 0) element(Red) with the 3rd(index 2) element (Black)
    Collections.swap(l_list, 0, 2);
    System.out.println("The New linked list after swap: " + l_list);

  // print the list
  System.out.println("The Original linked list: " + l_list);
  
   //Swapping 1st(index 0) element(Red) with the 3rd(index 2) element (Black)
    Collections.swap(l_list, 0, 2);
    System.out.println("The New linked list after swap: " + l_list);

/ create an empty linked list
  LinkedList <String> c1 = new LinkedList <String> ();
  
          c1.add("Red");
          c1.add("Green");
          c1.add("Black");
          c1.add("White");
          c1.add("Pink");
          System.out.println("List of first linked list: " + c1);
         LinkedList <String> c2 = new LinkedList <String> ();
          c2.add("Red");
          c2.add("Green");
          c2.add("Black");
          c2.add("Pink");
          System.out.println("List of second linked list: " + c2);
        
      // Let join above two list
        LinkedList <String> a = new LinkedList <String> ();
        a.addAll(c1);
        a.addAll(c2);
        System.out.println("New linked list: " + a);

  System.out.println("Removed element: "+c1.pop());


 String x = c1.peekFirst();
    System.out.println("First element in the list: " + x);
    System.out.println("Original linked list: " + c1); 

  String x = c1.peekLast();
    System.out.println("Last element in the list: " + x);
    System.out.println
("Original linked list: " + c1);
      

 if (c1.contains("Green")) {
       System.out.println("Color Green is present in the linked list.");
    } else {
       System.out.println("Color Green is not present in the linked list.");
     }

 //Convert a linked list to array list    
     List<String> list = new ArrayList<String>(linked_list);


 LinkedList<String> c1= new LinkedList<String>();
          c1.add("Red");
          c1.add("Green");
          c1.add("Black");
          c1.add("White");
          c1.add("Pink");
          System.out.println("Original linked list: " + c1);
          // Replacing 2nd element with new value
          c1.set(1, "Orange");
          System.out.println("The value of second element changed.");
          System.out.println("New linked list: " + c1);



   }
}